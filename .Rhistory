X2 <- as.matrix(X2)
Y2 <- as.vector(Y2)
number_n1 <- length(Y1)
number_n2 <- length(Y2)
number_n <- number_n1 + number_n2
number_p <- dim(X1)[2]
if (is.null(initial))
{
trans.step <- c(0, rep(zero.tol, number_p), 0)
}else
{
trans.step <- initial
trans.step[2:(number_p + 1)] <- trans.step[2:(number_p + 1)] *
(abs(trans.step[2:(number_p + 1)]) > zero.tol) +
zero.tol * (trans.step[2:(number_p + 1)] <= zero.tol) *
sign(trans.step[2:(number_p + 1)])
trans.step[number_p + 2] <- log(initial[number_p + 2])
}
trans.step
if (is.null(w.adapt))
{
w.adapt <- rep(1, number_p)
}else
{
w.adapt <- abs(w.adapt)
}
w.adapt
trans.step.new <- trans.step
iter ,- 1
iter <- 1
iter_p <- 1
w_p <- w.adapt[iter_p]
b_p_ini <- trans.step.new[iter_p + 1]
b_p_ini != 0
lL.run.iter_p <- function(b_p)
{
beta.iter <- trans.step[2:(number_p + 1)]
beta.iter[iter_p] <- b_p
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = trans.step[1],
beta = beta.iter,
sigma = exp(trans.step[number_p + 2]),
iter_max = iter.max, stop_tol = stop.tol) +
lambda * (w_p * abs(b_p_ini) +
0.5 * w_p / abs(b_p_ini) * (b_p ^ 2 - b_p_ini ^ 2))
return(value)
}
esti_p <- nlminb(start = b_p_ini, objective = lL.run.iter_p)
trans.step.new[iter_p + 1] <- esti_p$par * (abs(esti_p$par) > zero.tol)
iter  <-
1
trans.step.new <- trans.step
for (iter_p in 1:number_p)
{
w_p <- w.adapt[iter_p]
b_p_ini <- trans.step.new[iter_p + 1]
if (b_p_ini != 0)
{
lL.run.iter_p <- function(b_p)
{
beta.iter <- trans.step[2:(number_p + 1)]
beta.iter[iter_p] <- b_p
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = trans.step[1],
beta = beta.iter,
sigma = exp(trans.step[number_p + 2]),
iter_max = iter.max, stop_tol = stop.tol) +
lambda * (w_p * abs(b_p_ini) +
0.5 * w_p / abs(b_p_ini) * (b_p ^ 2 - b_p_ini ^ 2))
return(value)
}
esti_p <- nlminb(start = b_p_ini, objective = lL.run.iter_p)
trans.step.new[iter_p + 1] <- esti_p$par * (abs(esti_p$par) > zero.tol)
}
}
lL.run.other <- function(par.trans)
{
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = par.trans[1],
beta = trans.step.new[2:(number_p + 1)],
sigma = exp(par.trans[2]),
iter_max = iter.max, stop_tol = stop.tol)
return(value)
}
esti_other <- nlminb(start = c(trans.step.new[1],
trans.step.new[number_p + 2]),
objective = lL.run.other)
trans.step.new[c(1, number_p + 2)] <- esti_other$par
for (iter in 1:iter.max)
{
trans.step.new <- trans.step
for (iter_p in 1:number_p)
{
w_p <- w.adapt[iter_p]
b_p_ini <- trans.step.new[iter_p + 1]
if (b_p_ini != 0)
{
lL.run.iter_p <- function(b_p)
{
beta.iter <- trans.step[2:(number_p + 1)]
beta.iter[iter_p] <- b_p
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = trans.step[1],
beta = beta.iter,
sigma = exp(trans.step[number_p + 2]),
iter_max = iter.max, stop_tol = stop.tol) +
lambda * (w_p * abs(b_p_ini) +
0.5 * w_p / abs(b_p_ini) * (b_p ^ 2 - b_p_ini ^ 2))
return(value)
}
esti_p <- nlminb(start = b_p_ini, objective = lL.run.iter_p)
trans.step.new[iter_p + 1] <- esti_p$par * (abs(esti_p$par) > zero.tol)
}
}
lL.run.other <- function(par.trans)
{
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = par.trans[1],
beta = trans.step.new[2:(number_p + 1)],
sigma = exp(par.trans[2]),
iter_max = iter.max, stop_tol = stop.tol)
return(value)
}
esti_other <- nlminb(start = c(trans.step.new[1],
trans.step.new[number_p + 2]),
objective = lL.run.other)
trans.step.new[c(1, number_p + 2)] <- esti_other$par
if (sum(abs(trans.step.new - trans.step)) >= stop.tol)
{
trans.step <- trans.step.new
#print(paste("iter", iter, sep = "="))
}else
break
}
thetahat <- trans.step
thetahat[number_p + 2] <- exp(trans.step[number_p + 2])
names(thetahat) <- c("alpha", paste("beta", 1:number_p, sep=""), "sigma")
dG1hat <- dG1_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = thetahat[1],
beta = thetahat[2:(number_p + 1)],
sigma = thetahat[number_p + 2],
iter_max = iter.max, stop_tol = stop.tol)
dG1hat <- as.vector(dG1hat)
names(dG1hat) <- c(paste("X1.i", 1:number_n1, sep=""),
paste("X2.i", 1:number_n2, sep=""))
results <- list(alpha = thetahat["alpha"],
beta = thetahat[paste("beta", 1:number_p, sep="")],
sigma = thetahat["sigma"],
dG1 = dG1hat)
Sigmahat <- array(0, c(number_p + 2, number_p + 2))
lL.run <- function(theta.trans)
{
value <- -lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2),
n1 = number_n1,
alpha = theta.trans[1],
beta = theta.trans[2:(number_p + 1)],
sigma = exp(theta.trans[number_p + 2]),
iter_max = iter.max, stop_tol = stop.tol)
return(value)
}
i = 1
j = 1
thetahat.trans.i.r <- thetahat + diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.r[number_p + 2] <- log(thetahat.trans.i.r[number_p + 2])
thetahat.trans.i.l <- thetahat - diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.l[number_p + 2] <- log(thetahat.trans.i.l[number_p + 2])
Sigmahat[i, j] <- (lL.run(thetahat.trans.i.r) -
2 * lL.run(thetahat.trans) +
lL.run(thetahat.trans.i.l)) /
(number_n * diff.tol ^ 2)
theta.trans <- thetahat
theta.trans[number_p + 2] <- log(theta.trans[number_p + 2])
for (i in 1:(number_p + 2))
{
for (j in 1:i)
{
if (i==j)
{
thetahat.trans.i.r <- thetahat + diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.r[number_p + 2] <- log(thetahat.trans.i.r[number_p + 2])
thetahat.trans.i.l <- thetahat - diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.l[number_p + 2] <- log(thetahat.trans.i.l[number_p + 2])
Sigmahat[i, j] <- (lL.run(thetahat.trans.i.r) -
2 * lL.run(thetahat.trans) +
lL.run(thetahat.trans.i.l)) /
(number_n * diff.tol ^ 2)
}else
{
thetahat.trans.i.r <- thetahat + diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.r[number_p + 2] <- log(thetahat.trans.i.r[number_p + 2])
thetahat.trans.j.r <- thetahat + diag(number_p + 2)[, j] * diff.tol
thetahat.trans.j.r[number_p + 2] <- log(thetahat.trans.j.r[number_p + 2])
thetahat.trans.ij.r <- thetahat +
diag(number_p + 2)[, i] * diff.tol + diag(number_p + 2)[, j] * diff.tol
thetahat.trans.ij.r[number_p + 2] <- log(thetahat.trans.ij.r[number_p + 2])
Sigmahat[i, j] <-
(Sigmahat[j, i] <-
lL.run(thetahat.trans.ij.r) -
lL.run(thetahat.trans.i.r) -
lL.run(thetahat.trans.j.r) +
lL.run(thetahat.trans)) /
(number_n * diff.tol ^ 2)
}
}
}
thetahat.trans <- thetahat
thetahat.trans[number_p + 2] <- log(thetahat.trans[number_p + 2])
for (i in 1:(number_p + 2))
{
for (j in 1:i)
{
if (i==j)
{
thetahat.trans.i.r <- thetahat + diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.r[number_p + 2] <- log(thetahat.trans.i.r[number_p + 2])
thetahat.trans.i.l <- thetahat - diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.l[number_p + 2] <- log(thetahat.trans.i.l[number_p + 2])
Sigmahat[i, j] <- (lL.run(thetahat.trans.i.r) -
2 * lL.run(thetahat.trans) +
lL.run(thetahat.trans.i.l)) /
(number_n * diff.tol ^ 2)
}else
{
thetahat.trans.i.r <- thetahat + diag(number_p + 2)[, i] * diff.tol
thetahat.trans.i.r[number_p + 2] <- log(thetahat.trans.i.r[number_p + 2])
thetahat.trans.j.r <- thetahat + diag(number_p + 2)[, j] * diff.tol
thetahat.trans.j.r[number_p + 2] <- log(thetahat.trans.j.r[number_p + 2])
thetahat.trans.ij.r <- thetahat +
diag(number_p + 2)[, i] * diff.tol + diag(number_p + 2)[, j] * diff.tol
thetahat.trans.ij.r[number_p + 2] <- log(thetahat.trans.ij.r[number_p + 2])
Sigmahat[i, j] <-
(Sigmahat[j, i] <-
lL.run(thetahat.trans.ij.r) -
lL.run(thetahat.trans.i.r) -
lL.run(thetahat.trans.j.r) +
lL.run(thetahat.trans)) /
(number_n * diff.tol ^ 2)
}
}
}
Vhat <- solve(Sigmahat)
library(MYHRcpp)
test2 <- LS.profile.LASSOp.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
initial = c(test.esti$alpha,
test.esti$beta,
test.esti$sigma),
w.adapt = test.esti$beta,
lambda = 10)
test2
test1
test1 <- LS.profile.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2)
p <- 5
n1 <- 100
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
test1 <- dG1.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5)
test2 <- dG1_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
sum(abs(test1 - test2))
microbenchmark::microbenchmark(
R = dG1.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5),
Rcpp = dG1_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
)
test1 <- lL.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5)
test2 <- lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
abs(test1 - test2)
microbenchmark::microbenchmark(
R = lL.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5),
Rcpp = lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
)
test1 <- LS.profile.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2)
test1
test2 <- LS.profile.LASSOp.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
initial = c(test1$alpha,
test1$beta,
test1$sigma),
w.adapt = test1$beta,
lambda = 10)
test2
rbind(c(test1$alpha, test1$beta, test1$sigma),
c(test2$alpha, test2$beta, test2$sigma))
test3 <- LS.profile.LASSO.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
initial = c(test1$alpha,
test1$beta,
test1$sigma),
w.adapt = NULL,
seq.lambda = seq(16, 30, 1))
test3
library(MYHRcpp)
p <- 5
n1 <- 100
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
test1 <- dG1.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5)
test2 <- dG1_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
sum(abs(test1 - test2))
microbenchmark::microbenchmark(
R = dG1.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5),
Rcpp = dG1_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
)
test1 <- lL.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5)
test2 <- lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
abs(test1 - test2)
microbenchmark::microbenchmark(
R = lL.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter.max = 100, stop.tol = 1e-5),
Rcpp = lpL_normal_rcpp(X = rbind(X1, X2), Y = c(Y1, Y2), n1 = n1,
alpha = alpha0, beta = beta0, sigma = sigma0,
iter_max = 100, stop_tol = 1e-5)
)
test1 <- LS.profile.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2)
test2 <- LS.profile.LASSOp.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
initial = c(test1$alpha,
test1$beta,
test1$sigma),
w.adapt = test1$beta,
lambda = 10)
test3 <- LS.profile.LASSO.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
initial = c(test1$alpha,
test1$beta,
test1$sigma),
w.adapt = NULL,
seq.lambda = seq(16, 30, 1))
rbind(c(test1$alpha, test1$beta, test1$sigma),
c(test2$alpha, test2$beta, test2$sigma),
c(test3$alpha, test3$beta, test3$sigma))
LS.predict.normal(X1 = X1, Y1 = Y1,
X2 = X2, Y2 = Y2,
esti = test1,
X1.future = rep(0, p),
X2.future = rep(0, p))
library(MYHRcpp)
n <- 500
p <- 10
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p))+rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR2 <- cumuSAVE(X = X, Y = Y)
SDR3 <- CVSDR(X = X, Y = Y)
library(MYHRcpp)
n <- 500
p <- 10
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p))+rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR2 <- cumuSAVE(X = X, Y = Y)
SDR3 <- CVSDR(X = X, Y = Y)
MDR1 <- CVMDR(X = X, Y = Y)
SID1 <- SIDR(X = X, Y = Y)
library(MYHRcpp)
?nlminb
library(MYHRcpp)
p <- 5
n1 <- 100
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
test <- LSalt.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
initial = NULL,
iter.max = 20, stop.tol = 1e-5)
test
library(MYHRcpp)
p <- 5
n1 <- 100
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
test <- LSalt.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
initial = NULL,
iter.max = 20, stop.tol = 1e-5)
test
p <- 5
n1 <- 200
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
test <- LSalt.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
initial = NULL,
iter.max = 20, stop.tol = 1e-5)
test
p <- 5
n1 <- 200
n2 <- 200
alpha0 <- 0
beta0 <- c(1, 1, 0, 0, 0)
sigma0 <- 1
X1.space <- matrix(rnorm(n = 10000 * p, mean = 0, sd = 1), 10000, p)
Y2 <- rnorm(n = n2, mean = 1, sd = 1)
test.data <- simLS.GLM.normal(X1.space = X1.space, size1 = n1,
Y2i = Y2,
alpha0 = alpha0,
beta0 = beta0,
sigma0 = sigma0,
seed = 123)
X1 <- as.matrix(test.data$sample1[paste("covariate", 1:p, sep = ".")])
Y1 <- as.vector(test.data$sample1$response)
X2 <- as.matrix(test.data$sample2[paste("covariate", 1:p, sep = ".")])
Y2 <- as.vector(test.data$sample2$response)
X2 <- X2 + 1
test <- LSalt.profile.normal(X1 = X1, Y1 = Y1, X2 = X2, Y2 = Y2,
initial = NULL,
iter.max = 20, stop.tol = 1e-5)
test
