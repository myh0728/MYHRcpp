y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
y.pts <- matrix(0, 4, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.25))
y.pts[2, ] <- quantile(Y_shift, c(0.25, 0.5))
y.pts[3, ] <- quantile(Y_shift, c(0.55, 0.75))
y.pts[4, ] <- c(quantile(Y_shift, 0.75), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
phi3 <- colMeans(X_shift[(Y_shift > y.pts[3, 1]) & (Y_shift <= y.pts[3, 2]), ])
phi4 <- colMeans(X_shift[(Y_shift > y.pts[4, 1]) & (Y_shift <= y.pts[4, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2, phi3, phi4),
y.pts = y.pts,
sample.size = N))
control.EXsubgroupY = list(phi = rbind(phi1, phi2, phi3, phi4),
y.pts = y.pts,
sample.size = N)
number_n <- dim(X)[1]
number_p <- dim(X)[2]
theta.initial <- MLE.normal(X = X, Y = Y)$parameter
number_k <- dim(control.EXsubgroupY$phi)[1]
SS <- function(b)
{
Psi <- auxLS_EXsubgroupY_normal_rcpp(X = X,
phi = control.EXsubgroupY$phi,
alpha = theta.initial["alpha"],
beta = theta.initial[c("beta1", "beta2")],
sigma = theta.initial["sigma"],
LS_beta = b,
y_pts = control.EXsubgroupY$y.pts)$score
ss <- sum(Psi ^ 2)
return(ss)
}
beta.initial <- nlminb(start = beta0, objective = SS)$par
beta.initial
MLE.score <- diff_lL_normal_rcpp(X = X, Y = Y,
alpha = theta.initial["alpha"],
beta = theta.initial[c("beta1", "beta2")],
sigma = theta.initial["sigma"])
invH <- solve(MLE.score$hessian)
aux_Psi <- auxLS_EXsubgroupY_normal_rcpp(X = X,
phi = control.EXsubgroupY$phi,
alpha = theta.initial["alpha"],
beta = theta.initial[c("beta1", "beta2")],
sigma = theta.initial["sigma"],
LS_beta = beta.initial,
y_pts = control.EXsubgroupY$y.pts)
number_all <- 2 * number_p * number_k + number_p + 3
JV <- matrix(0, nrow = number_all, ncol = number_all)
dim(JV)
JV[1:(number_p * number_k), 1:(number_p * number_k)] <- -invH
JV[(number_all - number_p * number_k + 1):number_all, 1:(number_all - number_p * number_k)] <- aux_Psi$score_gradient
JV[1:(number_all - number_p * number_k), (number_all - number_p * number_k + 1):number_all] <- t(JV[(number_all - number_p * number_k + 1):number_all, 1:(number_all - number_p * number_k)])
JV[(number_all - number_p * number_k + 1):number_all, (number_all - number_p * number_k + 1):number_all] <- -aux_Psi$score_square
diag(JV[(number_p * number_k + 1):(number_p * number_k + number_p + 2), (number_p * number_k + 1):(number_p * number_k + number_p + 2)]) <- control.EXsubgroupY$sample.size / number_n
JV
invH
dim(invH)
t(aux_Psi$score_gradient[1:(number_p * number_k), 1:(number_p * number_k)])
library(MYHRcpp)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
y.pts <- matrix(0, 4, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.25))
y.pts[2, ] <- quantile(Y_shift, c(0.25, 0.5))
y.pts[3, ] <- quantile(Y_shift, c(0.55, 0.75))
y.pts[4, ] <- c(quantile(Y_shift, 0.75), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
phi3 <- colMeans(X_shift[(Y_shift > y.pts[3, 1]) & (Y_shift <= y.pts[3, 2]), ])
phi4 <- colMeans(X_shift[(Y_shift > y.pts[4, 1]) & (Y_shift <= y.pts[4, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2, phi3, phi4),
y.pts = y.pts,
sample.size = N))
library(MYHRcpp)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
y.pts <- matrix(0, 4, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.25))
y.pts[2, ] <- quantile(Y_shift, c(0.25, 0.5))
y.pts[3, ] <- quantile(Y_shift, c(0.55, 0.75))
y.pts[4, ] <- c(quantile(Y_shift, 0.75), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
phi3 <- colMeans(X_shift[(Y_shift > y.pts[3, 1]) & (Y_shift <= y.pts[3, 2]), ])
phi4 <- colMeans(X_shift[(Y_shift > y.pts[4, 1]) & (Y_shift <= y.pts[4, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2, phi3, phi4),
y.pts = y.pts,
sample.size = N))
load("~/Library/CloudStorage/Dropbox/Manuscript/HuangQinHuang_auxiliaryLS/simulations/test20230820_1.RData")
apply(results, c(1, 2), mean)
apply(results, c(1, 2), sd)
library(MYHRcpp)
X <- as.matrix(X)
library(MYHRcpp)
library(MYHRcpp)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
library(MYHRcpp)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 100
N <- 1000
N_sim <- 10000
SN <- 1000
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
results <- array(0, c(2, 4, SN))
dimnames(results) <- list(c("initial", "updated"),
c("alpha", "beta1", "beta2", "sigma"),
NULL)
sn <- 1
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
library(MYHRcpp)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - (theta0 + X1_sim * theta1 + X2_sim * theta2),
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
test1 <- auxLS_EXsubgroupY_normal_rcpp(X = X,
phi = rbind(phi1, phi2),
alpha = theta0,
beta = c(theta1, theta2),
sigma = sigma0,
LS_beta = beta0,
y_pts = y.pts)
test2 <- auxLS.EXsubgroupY.normal(X = X, alpha = theta0,
beta = c(theta1, theta2), sigma = sigma0,
phi = rbind(phi1, phi2), LS.beta = beta0,
y.pts = y.pts)
sum(abs(test1$score - test2$score))
sum(abs(test1$score_square - test2$score.square))
sum(abs(test1$score_gradient - test2$score.gradient))
microbenchmark::microbenchmark(
rcpp = auxLS_EXsubgroupY_normal_rcpp(X = X,
phi = rbind(phi1, phi2),
alpha = theta0,
beta = c(theta1, theta2),
sigma = sigma0,
LS_beta = beta0,
y_pts = y.pts),
R = auxLS.EXsubgroupY.normal(X = X, alpha = theta0,
beta = c(theta1, theta2), sigma = sigma0,
phi = rbind(phi1, phi2), LS.beta = beta0,
y.pts = y.pts)
)
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 1
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 1000
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
##### Normal regression model #####
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- c(-100, quantile(Y_shift, 0.5))
y.pts[2, ] <- c(quantile(Y_shift, 0.5), 100)
phi1 <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi2 <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = X, Y = Y, aux = "EXsubgroupY",
control.EXsubgroupY = list(phi = rbind(phi1, phi2), y.pts = y.pts,
sample.size = N))
library(MYHRcpp)
