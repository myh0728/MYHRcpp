ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.3", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$nu)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "Gamma",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.3", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$nu)
rm(list = ls())
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 0.5
theta1 <- -0.5
theta2 <- 0.5
sigma0 <- 1
beta0 <- rep(0.2, p)
n <- 50
N <- 1000
N_sim <- 50000
SN <- 1000
set.seed(54321)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
results <- array(0, c(2, 8, 4, SN))
dimnames(results) <- list(c("naive", "calibrated"),
c("MLE", "EX", "EY",
"EXsubY2", "EXsubY4",
"EYsubX.1", "EYsubX.2", "EYsubX.3"),
c("alpha", "beta1", "beta2", "sigma"),
NULL)
sn <- 1
set.seed(sn + 12345)
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X_shift <- matrix(0, nrow = N, ncol = 2)
w_i <- exp(X1_sim * beta0[1] + X2_sim * beta0[2])
for (i in 1:N)
{
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
Y_shift <- rnorm(n = N, mean = theta0 + X1_shift * theta1 + X2_shift * theta2, sd = sigma0)
initial <- MLE.normal(X = X, Y = Y, do.SE = FALSE)
results["naive", "MLE", , sn] <- initial$parameter
results["calibrated", "MLE", , sn] <- initial$parameter
### average of Y
phi.EY <- mean(Y_shift)
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["calibrated", "EY", , sn] <- c(improved$EY$alpha,
improved$EY$beta,
improved$EY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["naive", "EY", , sn] <- c(naive$EY$alpha,
naive$EY$beta,
naive$EY$sigma)
### average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
phi.EXsubY
ext.sample.size = N
initial = initial$parameter
initial.DR = beta0
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts)
iter.max = 10; step.rate = 2; step.max = 10; tol = 1e-5
number_n <- dim(X)[1]
number_p <- dim(X)[2]
number_k <- dim(info.EXsubY$phi)[1]
number_m <- number_k * number_p
ext.var
ext.var <- diag(number_m)
nll <- function(theta.beta.phi)
{
alpha <- theta.beta.phi[1]
beta <- theta.beta.phi[2:(number_p + 1)]
sigma <- exp(theta.beta.phi[number_p + 2])
CS.beta <- theta.beta.phi[(number_p + 3):(2 * number_p + 2)]
phi.par <- matrix(
theta.beta.phi[(2 * number_p + 3):(2 * number_p + 2 + number_m)],
number_k, number_p)
phi.par <- as.vector(info.EXsubY$phi - phi.par)
ll <- lL.normal(X = X, Y = Y,
alpha = alpha, beta = beta, sigma = sigma) -
auxCS_solveLagrange_EXsubY_normal(
X = X, alpha = alpha, beta = beta, sigma = sigma,
phi = phi.par, CS.beta = CS.beta,
y.pts = info.EXsubY$y.pts,
eta.initial = rep(0, number_m), iter.max = iter.max,
step.rate = step.rate, step.max = step.max, tol = tol)$value -
ext.sample.size * sum(t(solve(ext.var) * phi.diff) * phi.diff) / 2
return(-ll)
}
nll(c(alpha.initial, beta.initial,
log(sigma.initial), initial.DR,
as.vector(info.EXsubY$phi)))
alpha.initial <- initial[1]
beta.initial <- initial[2:(number_p + 1)]
sigma.initial <- initial[number_p + 2]
nll(c(alpha.initial, beta.initial,
log(sigma.initial), initial.DR,
as.vector(info.EXsubY$phi)))
theta.beta.phi <- c(alpha.initial, beta.initial,
log(sigma.initial), initial.DR,
as.vector(info.EXsubY$phi))
alpha <- theta.beta.phi[1]
beta <- theta.beta.phi[2:(number_p + 1)]
sigma <- exp(theta.beta.phi[number_p + 2])
CS.beta <- theta.beta.phi[(number_p + 3):(2 * number_p + 2)]
phi.par <- matrix(
theta.beta.phi[(2 * number_p + 3):(2 * number_p + 2 + number_m)],
number_k, number_p)
phi.par <- as.vector(info.EXsubY$phi - phi.par)
lL.normal(X = X, Y = Y,
alpha = alpha, beta = beta, sigma = sigma)
auxCS_solveLagrange_EXsubY_normal(
X = X, alpha = alpha, beta = beta, sigma = sigma,
phi = phi.par, CS.beta = CS.beta,
y.pts = info.EXsubY$y.pts,
eta.initial = rep(0, number_m), iter.max = iter.max,
step.rate = step.rate, step.max = step.max, tol = tol)
library(MYHRcpp)
rm(list = ls())
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 0.5
theta1 <- -0.5
theta2 <- 0.5
sigma0 <- 1
beta0 <- rep(0.2, p)
n <- 50
N <- 1000
N_sim <- 50000
SN <- 1000
set.seed(54321)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
results <- array(0, c(2, 8, 4, SN))
dimnames(results) <- list(c("naive", "calibrated"),
c("MLE", "EX", "EY",
"EXsubY2", "EXsubY4",
"EYsubX.1", "EYsubX.2", "EYsubX.3"),
c("alpha", "beta1", "beta2", "sigma"),
NULL)
sn <- 1
set.seed(sn + 12345)
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
X_shift <- matrix(0, nrow = N, ncol = 2)
w_i <- exp(X1_sim * beta0[1] + X2_sim * beta0[2])
for (i in 1:N)
{
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
Y_shift <- rnorm(n = N, mean = theta0 + X1_shift * theta1 + X2_shift * theta2, sd = sigma0)
initial <- MLE.normal(X = X, Y = Y, do.SE = FALSE)
results["naive", "MLE", , sn] <- initial$parameter
results["calibrated", "MLE", , sn] <- initial$parameter
### average of Y
phi.EY <- mean(Y_shift)
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["calibrated", "EY", , sn] <- c(improved$EY$alpha,
improved$EY$beta,
improved$EY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["naive", "EY", , sn] <- c(naive$EY$alpha,
naive$EY$beta,
naive$EY$sigma)
### average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["calibrated", "EXsubY2", , sn] <- c(improved$EXsubY$alpha,
improved$EXsubY$beta,
improved$EXsubY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["naive", "EXsubY2", , sn] <- c(naive$EXsubY$alpha,
naive$EXsubY$beta,
naive$EXsubY$sigma)
#
y.pts <- matrix(0, 4, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.00, 0.25))
y.pts[2, ] <- quantile(Y_shift, c(0.25, 0.50))
y.pts[3, ] <- quantile(Y_shift, c(0.50, 0.75))
y.pts[4, ] <- quantile(Y_shift, c(0.75, 1.00))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["calibrated", "EXsubY4", , sn] <- c(improved$EXsubY$alpha,
improved$EXsubY$beta,
improved$EXsubY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["naive", "EXsubY4", , sn] <- c(naive$EXsubY$alpha,
naive$EXsubY$beta,
naive$EXsubY$sigma)
### average of Y given X
phi.EYsubX <- mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)])
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.1", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.1", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
#
phi.EYsubX <- c(mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)]),
mean(Y_shift[X_shift[, 2] == 1]))
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
inclusion[, 2] <- (X[, 2] == 1)
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.2", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.2", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
#
phi.EYsubX <- c(mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)]),
mean(Y_shift[X_shift[, 2] == 1]),
mean(Y_shift[X_shift[, 2] == 0]))
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
inclusion[, 2] <- (X[, 2] == 1)
inclusion[, 3] <- (X[, 2] == 0)
improved <- auxShift.combine(X = X, Y = Y, shift = "CS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.3", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.3", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
rm(list = ls())
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 0.5
theta1 <- -0.5
theta2 <- 0.5
sigma0 <- 1
beta0 <- 0.2
n <- 50
N <- 1000
N_sim <- 50000
SN <- 1000
set.seed(54321)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
results <- array(0, c(2, 8, 4, SN))
dimnames(results) <- list(c("naive", "calibrated"),
c("MLE", "EX", "EY",
"EXsubY2", "EXsubY4",
"EYsubX.1", "EYsubX.2", "EYsubX.3"),
c("alpha", "beta1", "beta2", "sigma"),
NULL)
sn <- 1
set.seed(sn + 12345)
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE,
prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
initial <- MLE.normal(X = X, Y = Y, do.SE = FALSE)
results["naive", "MLE", , sn] <- initial$parameter
results["calibrated", "MLE", , sn] <- initial$parameter
### average of X
phi.EX <- colMeans(X_shift)
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EX = list(phi = phi.EX))
results["calibrated", "EX", , sn] <- c(improved$EX$alpha,
improved$EX$beta,
improved$EX$sigma)
### average of Y
phi.EY <- mean(Y_shift)
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["calibrated", "EY", , sn] <- c(improved$EY$alpha,
improved$EY$beta,
improved$EY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EY = list(phi = phi.EY))
results["naive", "EY", , sn] <- c(naive$EY$alpha,
naive$EY$beta,
naive$EY$sigma)
### average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["calibrated", "EXsubY2", , sn] <- c(improved$EXsubY$alpha,
improved$EXsubY$beta,
improved$EXsubY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["naive", "EXsubY2", , sn] <- c(naive$EXsubY$alpha,
naive$EXsubY$beta,
naive$EXsubY$sigma)
#
y.pts <- matrix(0, 4, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.00, 0.25))
y.pts[2, ] <- quantile(Y_shift, c(0.25, 0.50))
y.pts[3, ] <- quantile(Y_shift, c(0.50, 0.75))
y.pts[4, ] <- quantile(Y_shift, c(0.75, 1.00))
phi.EXsubY <- matrix(0, nrow = dim(y.pts)[1], ncol = p)
for (k in 1:dim(y.pts)[1])
{
phi.EXsubY[k, ] <- colMeans(
X_shift[(Y_shift > y.pts[k, 1]) & (Y_shift <= y.pts[k, 2]), ])
}
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["calibrated", "EXsubY4", , sn] <- c(improved$EXsubY$alpha,
improved$EXsubY$beta,
improved$EXsubY$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EXsubY = list(phi = phi.EXsubY, y.pts = y.pts))
results["naive", "EXsubY4", , sn] <- c(naive$EXsubY$alpha,
naive$EXsubY$beta,
naive$EXsubY$sigma)
### average of Y given X
phi.EYsubX <- mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)])
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.1", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.1", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
#
phi.EYsubX <- c(mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)]),
mean(Y_shift[X_shift[, 2] == 1]))
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
inclusion[, 2] <- (X[, 2] == 1)
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.2", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.2", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
#
phi.EYsubX <- c(mean(Y_shift[(X_shift[, 1] > -1) & (X_shift[, 1] <= 1)]),
mean(Y_shift[X_shift[, 2] == 1]),
mean(Y_shift[X_shift[, 2] == 0]))
inclusion <- matrix(0, n, length(phi.EYsubX))
inclusion[, 1] <- (X[, 1] > -1) & (X[, 1] <= 1)
inclusion[, 2] <- (X[, 2] == 1)
inclusion[, 3] <- (X[, 2] == 0)
improved <- auxShift.combine(X = X, Y = Y, shift = "PPS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["calibrated", "EYsubX.3", , sn] <- c(improved$EYsubX$alpha,
improved$EYsubX$beta,
improved$EYsubX$sigma)
naive <- auxShift.combine(X = X, Y = Y, shift = "NS", distribution = "normal",
ext.sample.size = N, method = "EL",
initial = initial$parameter, initial.DR = beta0,
info.EYsubX = list(phi = phi.EYsubX, inclusion = inclusion))
results["naive", "EYsubX.3", , sn] <- c(naive$EYsubX$alpha,
naive$EYsubX$beta,
naive$EYsubX$sigma)
