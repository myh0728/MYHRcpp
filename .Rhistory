seed = 123)
test.MLE.1 <- MLE.gamma(data = test.data,
X.name = paste("covariate", 1:p, sep="."),
Y.name = "response",
initial = c(-1, rep(1, p), 1),
do.SE = TRUE,
X.future = matrix(0, nrow = 1, ncol = p))
test.MLE.2 <- MLE.gamma(X = test.data[, paste("covariate", 1:p, sep=".")],
Y = test.data[, "response"],
initial = c(-1, rep(1, p), 1),
do.SE = TRUE,
X.future = matrix(0, nrow = 1, ncol = p))
test.MLE.2
test.MLE.1
library(MYHRcpp)
library(MYHRcpp)
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
nu0 <- 2
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rgamma(n = n, shape = nu0, rate = nu0 / exp(theta0 + X1 * theta1 + X2 * theta2))
test.data <- data.frame(response = Y,
covariate = X)
plot(X1, Y)
plot(X2, Y)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rgamma(n = N_sim,
shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dgamma(Y_shift[i], shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
phi <- colMeans(X_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EX = list(phi = phi))
phi <- mean(Y_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EY = list(phi = phi))
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EXsubY = list(phi = phi, y.pts = y.pts))
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
nu0 <- 2
beta0 <- 0.2
n <- 200
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rgamma(n = n, shape = nu0, rate = nu0 / exp(theta0 + X1 * theta1 + X2 * theta2))
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rgamma(n = N_sim,
shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dgamma(Y_shift[i], shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### auxiliary information: average of X
phi <- colMeans(X_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EX = list(phi = phi))
### auxiliary information: average of Y
phi <- mean(Y_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EY = list(phi = phi))
### auxiliary information: average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EXsubY = list(phi = phi, y.pts = y.pts))
### auxiliary information: average of Y given X
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
X = test.data[, paste("covariate.X", 1:p, sep = "")]
Y = test.data$response
ext.sample.size = N
info.EXsubY = list(phi = phi, y.pts = y.pts)
X <- as.matrix(X)
Y <- as.matrix(Y)
number_n <- dim(X)[1]
number_p <- dim(X)[2]
iter.max = 10
step.rate = 2
step.max = 10
tol = 1e-5
initial <- MLE.gamma(X = X, Y = Y, do.SE = FALSE)
alpha.initial <- initial$alpha
beta.initial <- initial$beta
nu.initial <- initial$nu
initial
number_k <- dim(info.EXsubY$phi)[1]
number_m <- number_k * number_p
initial.DR <- 0
is.null(ext.sample.size)
nll <- function(theta.beta.phi)
{
alpha <- theta.beta.phi[1]
beta <- theta.beta.phi[2:(number_p + 1)]
nu <- exp(theta.beta.phi[number_p + 2])
LS.beta <- theta.beta.phi[number_p + 3]
phi.par <- matrix(theta.beta.phi[(number_p + 4):(number_p + 3 + number_m)],
number_k, number_p)
ll <- lL.gamma(X = X, Y = Y,
alpha = alpha, beta = beta, nu = nu) -
auxLS_solveLagrange_EXsubY_gamma(
X = X, alpha = alpha, beta = beta, nu = nu,
phi = phi.par, LS.beta = LS.beta,
y.pts = info.EXsubY$y.pts,
eta.initial = rep(0, number_m), iter.max = iter.max,
step.rate = step.rate, step.max = step.max, tol = tol)$value -
ext.sample.size * sum((info.EXsubY$phi - phi.par) ^ 2) / 2
return(-ll)
}
nll(c(theta0, theta1, theta2, log(nu0), beta0, as.vector(t(phi))))
theta.beta.phi <- c(theta0, theta1, theta2, log(nu0), beta0, as.vector(t(phi)))
alpha <- theta.beta.phi[1]
beta <- theta.beta.phi[2:(number_p + 1)]
nu <- exp(theta.beta.phi[number_p + 2])
LS.beta <- theta.beta.phi[number_p + 3]
phi.par <- matrix(theta.beta.phi[(number_p + 4):(number_p + 3 + number_m)],
number_k, number_p)
lL.gamma(X = X, Y = Y,
alpha = alpha, beta = beta, nu = nu)
auxLS_solveLagrange_EXsubY_gamma(
X = X, alpha = alpha, beta = beta, nu = nu,
phi = phi.par, LS.beta = LS.beta,
y.pts = info.EXsubY$y.pts,
eta.initial = rep(0, number_m), iter.max = iter.max,
step.rate = step.rate, step.max = step.max, tol = tol)
ext.sample.size * sum((info.EXsubY$phi - phi.par) ^ 2) / 2
info.EXsubY$phi
theta.par
phi.par
theta.beta.phi[(number_p + 4):(number_p + 3 + number_m)]
theta.beta.phi
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
phi
y.pts
Y_shift
### auxiliary information: average of Y given X
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
phi.EYsubX.1
phi.EYsubX.2
X_shift[, 1] <= 0
##### Gamma regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
nu0 <- 2
beta0 <- -0.2
n <- 200
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rgamma(n = n, shape = nu0, rate = nu0 / exp(theta0 + X1 * theta1 + X2 * theta2))
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rgamma(n = N_sim,
shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dgamma(Y_shift[i], shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### auxiliary information: average of X
phi <- colMeans(X_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EX = list(phi = phi))
### auxiliary information: average of Y
phi <- mean(Y_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EY = list(phi = phi))
### auxiliary information: average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EXsubY = list(phi = phi, y.pts = y.pts))
### auxiliary information: average of Y given X
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
##### Gamma regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
nu0 <- 2
beta0 <- -0.2
n <- 200
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rgamma(n = n, shape = nu0, rate = nu0 / exp(theta0 + X1 * theta1 + X2 * theta2))
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rgamma(n = N_sim,
shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dgamma(Y_shift[i], shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### auxiliary information: average of X
phi <- colMeans(X_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EX = list(phi = phi))
### auxiliary information: average of Y
phi <- mean(Y_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EY = list(phi = phi))
### auxiliary information: average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
phi
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EXsubY = list(phi = phi, y.pts = y.pts))
### auxiliary information: average of Y given X
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
phi.EYsubX.1
phi.EYsubX.2
Y_shift[X_shift[, 1] > 0]
Y_shift[X_shift[, 1] <= 0]
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "NS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
colMeans(X_shift)
mean(Y_shift)
hist(Y_shift)
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
nu0 <- 2
beta0 <- -0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rgamma(n = n, shape = nu0, rate = nu0 / exp(theta0 + X1 * theta1 + X2 * theta2))
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rgamma(n = N_sim,
shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dgamma(Y_shift[i], shape = nu0,
rate = nu0 / exp(theta0 + X1_sim * theta1 + X2_sim * theta2))
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### auxiliary information: average of X
phi <- colMeans(X_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EX = list(phi = phi))
### auxiliary information: average of Y
phi <- mean(Y_shift)
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EY = list(phi = phi))
### auxiliary information: average of X given Y
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EXsubY = list(phi = phi, y.pts = y.pts))
### auxiliary information: average of Y given X
phi.EYsubX.1 <- mean(Y_shift[X_shift[, 1] > 0])
phi.EYsubX.2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxShift.combine(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response,
shift = "PPS",
distribution = "Gamma",
ext.sample.size = N,
method = "EL",
info.EYsubX = list(phi = c(phi.EYsubX.1, phi.EYsubX.2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)))
MLE.gamma(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
library(MYHRcpp)
library(MYHpack)
library(MYHRcpp)
