ext.sample.size = N, method = "EL", initial = NULL,
control.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
phi <- colMeans(X_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EX", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EX = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
phi <- mean(Y_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
library(MYHRcpp)
phi <- mean(Y_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
1
as.vector(1)
library(MYHRcpp)
phi <- mean(Y_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
library(MYHRcpp)
phi <- mean(Y_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
library(MYHRcpp)
a <- 2
library(MYHRcpp)
solve_rcpp
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
N
phi
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
control.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
a <- 1:3
a[4]
X = test.data[, paste("covariate.X", 1:p, sep = "")]
Y = test.data$response
aux = "EXsubY"
shift = TRUE
ext.sample.size = N
method = "fast"
initial = NULL
info.EXsubY = list(phi = phi, y.pts = y.pts)
iter.max = 10
step.rate = 2
step.max = 10
tol = 1e-5
X <- as.matrix(X)
Y <- as.matrix(Y)
number_n <- dim(X)[1]
number_p <- dim(X)[2]
is.null(initial)
initial <- MLE.normal(X = X, Y = Y, do.SE = FALSE)
alpha.initial <- initial$alpha
beta.initial <- initial$beta
sigma.initial <- initial$sigma
theta.initial <- c(alpha.initial, beta.initial, sigma.initial)
theta.initial
MLE.score <- diff_lL_normal_rcpp(
X = X, Y = Y,
alpha = theta.initial[1],
beta = theta.initial[2:(number_p + 1)],
sigma = theta.initial[number_p + 2])
invH <- solve(MLE.score$hessian)
MLE.score
aux == "EXsubY"
is.null(info.EXsubY$phi)
number_k <- dim(info.EXsubY$phi)[1]
number_m <- number_k * number_p
number_k
number_m
shift
SS <- function(b)
{
Psi <- auxLS_EXsubY_normal_rcpp(
X = X,
phi = info.EXsubY$phi,
alpha = theta.initial[1],
beta = theta.initial[2:(number_p + 1)],
sigma = theta.initial[number_p + 2],
LS_beta = b,
y_pts = info.EXsubY$y.pts)$score
ss <- sum(Psi ^ 2)
return(ss)
}
beta.initial <- nlminb(start = 0, objective = SS)$par
beta.initial
aux_Psi <- auxLS_EXsubY_normal_rcpp(
X = X,
phi = info.EXsubY$phi,
alpha = theta.initial[1],
beta = theta.initial[2:(number_p + 1)],
sigma = theta.initial[number_p + 2],
LS_beta = beta.initial,
y_pts = info.EXsubY$y.pts)
aux_Psi
number_all <- 2 * number_m + number_p + 3
JV <- matrix(0, nrow = number_all, ncol = number_all)
JV[1:(number_p + 2), 1:(number_p + 2)] <- -invH
JV[(number_all - number_m + 1):number_all,
1:(number_all - number_m)] <- aux_Psi$score_gradient
JV[1:(number_all - number_m),
(number_all - number_m + 1):number_all] <- t(
JV[(number_all - number_m + 1):number_all,
1:(number_all - number_m)])
JV[(number_all - number_m + 1):number_all,
(number_all - number_m + 1):number_all] <- -aux_Psi$score_square
JV[(number_p + 3):(number_m + number_p + 2),
(number_p + 3):(number_m + number_p + 2)] <- diag(number_m) *
ext.sample.size / number_n
JV
thetahat <- as.vector(theta.initial + invH %*%
t(matrix(aux_Psi$score_gradient[, 1:(number_p + 2)],
nrow = number_m,
ncol = number_p + 2)) %*%
pinv_rcpp(JV)[(number_all - number_m + 1):number_all,
(number_all - number_m + 1):number_all] %*%
(-aux_Psi$score))
thetahat
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts))
library(MYHRcpp)
library(MYHRcpp)
library(MYHRcpp)
##### Normal regression model #####
p <- 2
theta0 <- 1
theta1 <- 1
theta2 <- 1
sigma0 <- 0.5
beta0 <- 0.2
n <- 100
N <- 1000
N_sim <- 10000
X1 <- rnorm(n = n, mean = 0, sd = 1)
X2 <- rbinom(n = n, size = 1, prob = 0.6)
X <- cbind(X1, X2)
Y <- rnorm(n = n, mean = theta0 + X1 * theta1 + X2 * theta2, sd = sigma0)
test.data <- data.frame(response = Y,
covariate = X)
X1_sim <- rnorm(n = N_sim, mean = 0, sd = 1)
X2_sim <- rbinom(n = N_sim, size = 1, prob = 0.6)
X_sim <- cbind(X1_sim, X2_sim)
Y_sim <- rnorm(n = N_sim,
mean = theta0 + X1_sim * theta1 + X2_sim * theta2,
sd = sigma0)
Y_shift <- sample(x = Y_sim, size = N, replace = TRUE, prob = exp(beta0 * Y_sim))
X_shift <- matrix(0, nrow = N, ncol = 2)
for (i in 1:N)
{
w_i <- dnorm(Y_shift[i] - theta0 - X1_sim * theta1 - X2_sim * theta2,
mean = 0, sd = sigma0)
X_shift[i, ] <- X_sim[sample(1:N_sim, size = 1, prob = w_i), ]
}
X1_shift <- X_shift[, 1]
X2_shift <- X_shift[, 2]
MLE.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, do.SE = FALSE)
### average of X given Y (auxiliary information)
y.pts <- matrix(0, 2, 2)
y.pts[1, ] <- quantile(Y_shift, c(0.0, 0.5))
y.pts[2, ] <- quantile(Y_shift, c(0.5, 1.0))
phi <- matrix(0, 2, p)
phi[1, ] <- colMeans(X_shift[(Y_shift > y.pts[1, 1]) & (Y_shift <= y.pts[1, 2]), ])
phi[2, ] <- colMeans(X_shift[(Y_shift > y.pts[2, 1]) & (Y_shift <= y.pts[2, 2]), ])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts))
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = FALSE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = FALSE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EXsubY", shift = FALSE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EXsubY = list(phi = phi, y.pts = y.pts),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
phi <- colMeans(X_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EX", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EX = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EX", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EX = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EX", shift = FALSE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EX = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EX", shift = FALSE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EX = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
phi1 <- mean(Y_shift[X_shift[, 1] > 0])
phi2 <- mean(Y_shift[X_shift[, 1] <= 0])
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = TRUE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = FALSE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = FALSE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EYsubX", shift = FALSE,
ext.sample.size = N, method = "fast", initial = NULL,
info.EYsubX = list(phi = c(phi1, phi2),
inclusion = cbind(X[, 1] > 0, X[, 1] <= 0)),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
phi <- mean(Y_shift)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = TRUE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = FALSE,
ext.sample.size = NULL, method = "EL", initial = NULL,
info.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
auxLS.normal(X = test.data[, paste("covariate.X", 1:p, sep = "")],
Y = test.data$response, aux = "EY", shift = FALSE,
ext.sample.size = N, method = "EL", initial = NULL,
info.EY = list(phi = phi),
iter.max = 10, step.rate = 2, step.max = 10, tol = 1e-5)
library(MYHRcpp)
