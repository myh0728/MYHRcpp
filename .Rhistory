test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
ggplot2::autoplot(
microbenchmark::microbenchmark(
R = CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp = CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp_uniY = CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
)
)
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X[order(Y), ], Y = Y[order(Y)], h = 1.5,
rank_y_in_Y = rankAinB_rcpp(Y, Y), p_y = rep(1 / n, n))
dim(X)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = as.matrix(X[order(Y), ]), Y = Y[order(Y)], h = 1.5,
rank_y_in_Y = rankAinB_rcpp(Y, Y), p_y = rep(1 / n, n))
rankAinB_rcpp(Y, Y)
test4 <- CVDNWuniY_K2B_rcpp_n1(X = as.matrix(X[order(Y), ]), Y = Y[order(Y)], h = 1.5,
rank_y_in_Y = rankAinB_rcpp(sort(Y), Y), p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = as.matrix(X[order(Y), ]), Y = Y[order(Y)], h = 1.5,
rank_y_in_Y = rankAinB_rcpp(sort(Y), sort(Y)), p_y = rep(1 / n, n))
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
rank.y.in.Y
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
sum(abs(test1 - test4))
order(Y)
Y.sort
sort(order(Y))
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
sum(abs(test1 - test4))
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
sum(abs(test1 - test4))
ggplot2::autoplot(
microbenchmark::microbenchmark(
R = CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp = CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp_uniY = CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n)),
Rcpp_uniY_n1 = CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
)
)
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp(X = X.sort, Y = Y.sort, h = 1.5, y = Y, p_y = rep(1 / n, n))
test5 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
test3$cv
test4$cv
test5$cv
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp(X = X.sort, Y = Y.sort, h = 1.5, y = Y.sort, p_y = rep(1 / n, n))
test5 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
test3$cv
test4$cv
test5$cv
test4$Dhat
cbind(test4$Dhat, test5$Dhat)
sum(abs(test4$Dhat - test5$Dhat))
sum(abs(test4$Nhat - test5$Nhat))
dim(abs(test4$Nhat - test5$Nhat))
rank.y.in.Y
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp(X = X.sort, Y = Y.sort, h = 1.5, y = Y.sort, p_y = rep(1 / n, n))
test5 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
sum(abs(test1 - test4))
sum(abs(test1 - test5))
ggplot2::autoplot(
microbenchmark::microbenchmark(
R = CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp = CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp_uniY = CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n)),
Rcpp_uniY_n1 = CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
)
)
microbenchmark::microbenchmark(
R = CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp = CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp_uniY = CVDNWuniY_K2B_rcpp(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n)),
Rcpp_uniY_n1 = CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
)
library(MYHRcpp)
n <- 100
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
w <- rexp(n)
X.sort <- as.matrix(X[order(Y), ])
Y.sort <- Y[order(Y)]
rank.y.in.Y <- rankAinB_rcpp(Y.sort, Y.sort)
test1 <- CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test2 <- CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n))
test3 <- CVDNWuniY_K2B_rcpp(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n))
test4 <- CVDNWuniY_K2B_rcpp_n1(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
test5 <- CVDNWuniY_K2B_rcpp_n1(X = X.sort, Y = Y.sort, h = 1.5, y = Y.sort, p_y = rep(1 / n, n))
sum(abs(test1 - test2))
sum(abs(test1 - test3))
sum(abs(test1 - test4))
sum(abs(test1 - test5))
ggplot2::autoplot(
microbenchmark::microbenchmark(
R = CVMNW_K2B_R(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp = CVMNW_K2B_rcpp(X = X, Y = Y.CP, h = 1.5, p_Y = rep(1 / n, n)),
Rcpp_uniY = CVDNWuniY_K2B_rcpp(X = X.sort, Y = Y.sort, h = 1.5,
rank_y_in_Y = rank.y.in.Y, p_y = rep(1 / n, n)),
Rcpp_uniY_n1 = CVDNWuniY_K2B_rcpp_n1(X = X, Y = Y, h = 1.5, y = Y, p_y = rep(1 / n, n))
)
)
library(MYHRcpp)
rep(c(1, 2), 10)
rep(c(1, 2), 11)
?c
?nlminb
quantile(1:10, probs = c(0, 1))
quantile(1:10, probs = c(0, 0.1, 1))
a <- matrix(1:5, 5, 1)
a
a[c(1, 4, 2)]
order(a)
sort(unique(a))
library(MYHRcpp)
?nmk
n <- 1000
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
LOOCV(X = X, Y = Y)
LOOCV(X = X, Y = Y, regression = "mean")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "K4_Biweight")
n <- 500
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
### selecting bandwidth using leave-one-out cross-validation
LOOCV(X = X, Y = Y)
LOOCV(X = X, Y = Y, regression = "mean")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "K4_Biweight")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "Gaussian")
LOOCV(X = X, Y = Y, regression = "distribution")
library(MYHRcpp)
n <- 500
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
### selecting bandwidth using leave-one-out cross-validation
LOOCV(X = X, Y = Y)
LOOCV(X = X, Y = Y, regression = "mean")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "K4_Biweight")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "Gaussian")
LOOCV(X = X, Y = Y, regression = "distribution")
LOOCV(X = X, Y = Y, regression = "mean", method = "nlminb")
LOOCV(X = X, Y = Y, regression = "mean", method = "nmk")
library(dfoptim)
LOOCV(X = X, Y = Y, regression = "mean", method = "nmk")
library(MYHRcpp)
n <- 500
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
### selecting bandwidth using leave-one-out cross-validation
LOOCV(X = X, Y = Y)
LOOCV(X = X, Y = Y, regression = "mean")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "K4_Biweight")
LOOCV(X = X, Y = Y, regression = "mean", kernel = "Gaussian")
LOOCV(X = X, Y = Y, regression = "mean", method = "nlminb")
LOOCV(X = X, Y = Y, regression = "distribution")
LOOCV(X = X, Y = Y, regression = "distribution", kernel = "K4_Biweight")
LOOCV(X = X, Y = Y, regression = "distribution", kernel = "Gaussian")
LOOCV(X = X, Y = Y, regression = "distribution", method = "nlminb")
LOOCV(X = X, Y = Y, regression = "distribution", dist.mode = "sample")
LOOCV(X = X, Y = Y, regression = "distribution", dist.mode = "quantile")
LOOCV(X = X, Y = Y, regression = "distribution", dist.mode = "sample",
dist.sample.control = list(SN = 10, seed = 123))
LOOCV(X = X, Y = Y, regression = "distribution", dist.mode = "quantile",
dist.quantile.control = list(QN = 10))
library(MYHRcpp)
library(MYHRcpp)
yhat0 <- NW(X = X, Y = Y)
dim(X)
dim(Y)
yhat0 <- NW(X = X, Y = Y)
yhat1 <- NW(X = X, Y = Y, x = x)
yhat2 <- NW(X = X, Y = Y, x = x, regression = "mean")
yhat3 <- NW(X = X, Y = Y, x = x, regression = "mean",
kernel = "K4_Biweight")
yhat4 <- NW(X = X, Y = Y, x = x, regression = "mean",
kernel = "K4_Biweight", bandwidth = 0.5)
yhat5 <- NW(X = X, Y = Y, x = x, regression = "distribution")
yhat6 <- NW(X = X, Y = Y, x = x, regression = "distribution",
y = sort(unique(Y)))
plot(X, Y, cex = 0.5)
lines(x, yhat)
plot(X, Y, cex = 0.5)
lines(x, yhat0)
yhat0
plot(X, Y, cex = 0.5)
lines(x, NW(X = X, Y = Y, x = x))
lines(x, NW(X = X, Y = Y, x = x, bandwidth = 0.1), col = 2)
lines(x, NW(X = X, Y = Y, x = x, bandwidth = 1), col = 3)
lines(x, NW(X = X, Y = Y, x = x, bandwidth = 2), col = 4)
RW <- colSums(outer(sample(1:n, size = n, replace = TRUE), 1:n, FUN = "=="))
hhat.boot <- LOOCV(X = X, Y = Y, wi.boot = RW)
n <- 100
p <- 5
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
LOOCV(X = X, Y = Y)
yhat <- NW(X = X, Y = Y, x = X)
plot(Y, yhat, cex = 0.5)
lines(c(-3, 3), c(-3, 3))
library(MYHRcpp)
library(MYHRcpp)
floor(100/6)
floor(100/6) * 6
sample(1:5, 15)
sample(1:5, 5)
library(MYHRcpp)
library(MYHRcpp)
##### univariate covariate
n <- 500
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
KfoldCV(X = X, Y = Y)
LOOCV(X = X, Y = Y)
KfoldCV(X = X, Y = Y, K = 2)
KfoldCV(X = X, Y = Y, K = 10)
KfoldCV(X = X, Y = Y, K = 2, regression = "distribution")
library(MYHRcpp)
##### univariate covariate
n <- 500
p <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
x <- as.matrix(seq(-3, 3, 0.1))
### selecting bandwidth using leave-one-out cross-validation
LOOCV(X = X, Y = Y)
LOOCV(X = X, Y = Y, regression = "distribution")
KfoldCV(X = X, Y = Y, regression = "distribution")
KfoldCV(X = X, Y = Y, regression = "distribution", K = 2)
library(MYHRcpp)
library(MYHRcpp)
n <- 500
p <- 10
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR1
A <- matrix(rnorm(5*5), 5, 5)
A
chol(A)
chol(t(A) %*% A)
?chol(A)
B <- chol(t(A) %*% A)
B %*% B
A %*% A
library(MYHRcpp)
A <- matrix(rnorm(50 ^ 2), 50, 50)
B <- t(A) %*% A
test1 <- chol(B)
test2 <- chol_rcpp(B)
sum(abs(test1 - test2))
sum(abs(t(test1) %*% test1 - B))
ggplot2::autoplot(
microbenchmark::microbenchmark(
chol = chol(B),
Rcpp = chol_rcpp(B)
)
)
n <- 500
p <- 10
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
eps = 1e-7
X <- as.matrix(X)
Y <- as.matrix(Y)
number_n <- dim(X)[1]
number_p <- dim(X)[2]
# calculating induced response process 1(Y_i\leq y) at y=Y_i
if (dim(Y)[2] == 1)
{
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
}else
{
Y.CP <- ctingP_rcpp(Y, Y)
}
# centralizing and standardizing covariates
eigen_invVarX <- eigen(inv_sympd_rcpp(var(X)))
eigen_invVarX
normalizing <- eigen_invVarX$vectors %*% diag(eigen_invVarX$values) ^ 0.5 %*% t(eigen_invVarX$vectors)
normalizing
normalizing %*% normalizing %*% var(X)
# centralizing and standardizing covariates
eigen_invVarX <- eigen(inv_sympd_rcpp(var(X) + eps * diag(number_p)))
normalizing <- eigen_invVarX$vectors %*% diag(eigen_invVarX$values) ^ 0.5 %*% t(eigen_invVarX$vectors)
normalizing %*% normalizing %*% var(X)
eigen_invVarX <- eigen(inv_sympd_rcpp(var(X) + eps * diag(number_p)))
normalizing <- eigen_invVarX$vectors %*%
diag(eigen_invVarX$values) ^ 0.5 %*%
t(eigen_invVarX$vectors)
X.cs <- t(normalizing %*% (t(X) - colMeans(X)))
var(X.cs)
var(X.cs)-diag(p)
sum(abs(var(X.cs)-diag(p)))
# calculating m(y)=\E[X_i 1(Y_i\leq y)]
m.y <- t(X.cs) %*% Y.CP / number_n
# calculating K=\E[m(Y_i)m(Y_i)^T]
Km <- m.y %*% t(m.y) / number_n
RR <- eigen_rcpp(Km)
Bhat <- normalizing %*% RR$vector
X <- as.matrix(X)
Y <- as.matrix(Y)
number_n <- dim(X)[1]
number_p <- dim(X)[2]
# calculating induced response process 1(Y_i\leq y) at y=Y_i
if (dim(Y)[2] == 1)
{
Y.CP <- ctingP_uni_rcpp(as.vector(Y), as.vector(Y))
}else
{
Y.CP <- ctingP_rcpp(Y, Y)
}
eigen_invVarX <- eigen(inv_sympd_rcpp(var(X) + eps * diag(number_p)))
normalizing <- eigen_invVarX$vectors %*%
diag(eigen_invVarX$values) ^ 0.5 %*%
t(eigen_invVarX$vectors)
X.cs <- t(normalizing %*% (t(X) - colMeans(X)))
Y.CP.cs <- t(t(Y.CP) - colMeans(Y.CP))
library(MYHRcpp)
n <- 500
p <- 10
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(sin(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR2 <- cumuSAVE(X = X, Y = Y)
SDR1
SDR2
n <- 500
p <- 10
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(exp(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR2 <- cumuSAVE(X = X, Y = Y)
SDR1$basis[, 1]
SDR2$basis[, 1]
library(MYHRcpp)
n <- 500
p <- 10
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- as.matrix(exp(X %*% rep(1, p)) + rnorm(n, mean = 0, sd = 0.2))
SDR1 <- cumuSIR(X = X, Y = Y)
SDR2 <- cumuSAVE(X = X, Y = Y)
SDR1_wrong <- cumSIR_wrong(X = X, Y = Y)
SDR1_wrong <- cumuSIR_wrong(X = X, Y = Y)
SDR1_wrong$basis[, 1]
SDR1$basis[, 1]
